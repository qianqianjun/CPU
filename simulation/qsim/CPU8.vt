// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/07/2019 11:24:13"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CPU8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU8_vlg_sample_tst(
	CLK,
	IN,
	RST,
	STEP,
	sampler_tx
);
input  CLK;
input [7:0] IN;
input  RST;
input  STEP;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or IN or RST or STEP)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CPU8_vlg_check_tst (
	ADDR,
	ALU,
	BUS,
	DOUT,
	DR1,
	DR2,
	FC,
	IR,
	LED_B,
	M,
	PC,
	R0,
	R1,
	R2,
	RAM,
	RAM_B,
	sE,
	SFT,
	SW_B,
	uA,
	sampler_rx
);
input [7:0] ADDR;
input [7:0] ALU;
input [7:0] BUS;
input [7:0] DOUT;
input [7:0] DR1;
input [7:0] DR2;
input  FC;
input [7:0] IR;
input  LED_B;
input [24:1] M;
input [7:0] PC;
input [7:0] R0;
input [7:0] R1;
input [7:0] R2;
input [7:0] RAM;
input  RAM_B;
input [6:1] sE;
input [7:0] SFT;
input  SW_B;
input [5:0] uA;
input sampler_rx;

reg [7:0] ADDR_expected;
reg [7:0] ALU_expected;
reg [7:0] BUS_expected;
reg [7:0] DOUT_expected;
reg [7:0] DR1_expected;
reg [7:0] DR2_expected;
reg  FC_expected;
reg [7:0] IR_expected;
reg  LED_B_expected;
reg [24:1] M_expected;
reg [7:0] PC_expected;
reg [7:0] R0_expected;
reg [7:0] R1_expected;
reg [7:0] R2_expected;
reg [7:0] RAM_expected;
reg  RAM_B_expected;
reg [6:1] sE_expected;
reg [7:0] SFT_expected;
reg  SW_B_expected;
reg [5:0] uA_expected;

reg [7:0] ADDR_prev;
reg [7:0] ALU_prev;
reg [7:0] BUS_prev;
reg [7:0] DOUT_prev;
reg [7:0] DR1_prev;
reg [7:0] DR2_prev;
reg  FC_prev;
reg [7:0] IR_prev;
reg  LED_B_prev;
reg [24:1] M_prev;
reg [7:0] PC_prev;
reg [7:0] R0_prev;
reg [7:0] R1_prev;
reg [7:0] R2_prev;
reg [7:0] RAM_prev;
reg  RAM_B_prev;
reg [6:1] sE_prev;
reg [7:0] SFT_prev;
reg  SW_B_prev;
reg [5:0] uA_prev;

reg [7:0] ADDR_expected_prev;
reg [7:0] ALU_expected_prev;
reg [7:0] BUS_expected_prev;
reg [7:0] DOUT_expected_prev;
reg [7:0] DR1_expected_prev;
reg [7:0] DR2_expected_prev;
reg  FC_expected_prev;
reg [7:0] IR_expected_prev;
reg [24:1] M_expected_prev;
reg [7:0] PC_expected_prev;
reg [7:0] R0_expected_prev;
reg [7:0] R1_expected_prev;
reg [7:0] R2_expected_prev;
reg [7:0] RAM_expected_prev;
reg [7:0] SFT_expected_prev;
reg [5:0] uA_expected_prev;

reg [7:0] last_ADDR_exp;
reg [7:0] last_ALU_exp;
reg [7:0] last_BUS_exp;
reg [7:0] last_DOUT_exp;
reg [7:0] last_DR1_exp;
reg [7:0] last_DR2_exp;
reg  last_FC_exp;
reg [7:0] last_IR_exp;
reg [24:1] last_M_exp;
reg [7:0] last_PC_exp;
reg [7:0] last_R0_exp;
reg [7:0] last_R1_exp;
reg [7:0] last_R2_exp;
reg [7:0] last_RAM_exp;
reg [7:0] last_SFT_exp;
reg [5:0] last_uA_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:20] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 20'b1;
end

// update real /o prevs

always @(trigger)
begin
	ADDR_prev = ADDR;
	ALU_prev = ALU;
	BUS_prev = BUS;
	DOUT_prev = DOUT;
	DR1_prev = DR1;
	DR2_prev = DR2;
	FC_prev = FC;
	IR_prev = IR;
	LED_B_prev = LED_B;
	M_prev = M;
	PC_prev = PC;
	R0_prev = R0;
	R1_prev = R1;
	R2_prev = R2;
	RAM_prev = RAM;
	RAM_B_prev = RAM_B;
	sE_prev = sE;
	SFT_prev = SFT;
	SW_B_prev = SW_B;
	uA_prev = uA;
end

// update expected /o prevs

always @(trigger)
begin
	ADDR_expected_prev = ADDR_expected;
	ALU_expected_prev = ALU_expected;
	BUS_expected_prev = BUS_expected;
	DOUT_expected_prev = DOUT_expected;
	DR1_expected_prev = DR1_expected;
	DR2_expected_prev = DR2_expected;
	FC_expected_prev = FC_expected;
	IR_expected_prev = IR_expected;
	M_expected_prev = M_expected;
	PC_expected_prev = PC_expected;
	R0_expected_prev = R0_expected;
	R1_expected_prev = R1_expected;
	R2_expected_prev = R2_expected;
	RAM_expected_prev = RAM_expected;
	SFT_expected_prev = SFT_expected;
	uA_expected_prev = uA_expected;
end


// expected ADDR[ 7 ]
initial
begin
	ADDR_expected[7] = 1'bX;
	ADDR_expected[7] = #98999000 1'b0;
end 
// expected ADDR[ 6 ]
initial
begin
	ADDR_expected[6] = 1'bX;
	ADDR_expected[6] = #98999000 1'b0;
end 
// expected ADDR[ 5 ]
initial
begin
	ADDR_expected[5] = 1'bX;
	ADDR_expected[5] = #98999000 1'b0;
end 
// expected ADDR[ 4 ]
initial
begin
	ADDR_expected[4] = 1'bX;
	ADDR_expected[4] = #98999000 1'b0;
end 
// expected ADDR[ 3 ]
initial
begin
	ADDR_expected[3] = 1'bX;
	ADDR_expected[3] = #98999000 1'b0;
end 
// expected ADDR[ 2 ]
initial
begin
	ADDR_expected[2] = 1'bX;
	ADDR_expected[2] = #98999000 1'b0;
end 
// expected ADDR[ 1 ]
initial
begin
	ADDR_expected[1] = 1'bX;
	ADDR_expected[1] = #98999000 1'b0;
end 
// expected ADDR[ 0 ]
initial
begin
	ADDR_expected[0] = 1'bX;
	ADDR_expected[0] = #98999000 1'b0;
end 
// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'bX;
	PC_expected[7] = #98999000 1'b0;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'bX;
	PC_expected[6] = #98999000 1'b0;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'bX;
	PC_expected[5] = #98999000 1'b0;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'bX;
	PC_expected[4] = #98999000 1'b0;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'bX;
	PC_expected[3] = #98999000 1'b0;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'bX;
	PC_expected[2] = #98999000 1'b0;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'bX;
	PC_expected[1] = #98999000 1'b0;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'bX;
	PC_expected[0] = #98999000 1'b0;
end 
// expected IR[ 7 ]
initial
begin
	IR_expected[7] = 1'bX;
	IR_expected[7] = #98999000 1'b0;
end 
// expected IR[ 6 ]
initial
begin
	IR_expected[6] = 1'bX;
	IR_expected[6] = #98999000 1'b0;
end 
// expected IR[ 5 ]
initial
begin
	IR_expected[5] = 1'bX;
	IR_expected[5] = #98999000 1'b0;
end 
// expected IR[ 4 ]
initial
begin
	IR_expected[4] = 1'bX;
	IR_expected[4] = #98999000 1'b0;
end 
// expected IR[ 3 ]
initial
begin
	IR_expected[3] = 1'bX;
	IR_expected[3] = #98999000 1'b0;
end 
// expected IR[ 2 ]
initial
begin
	IR_expected[2] = 1'bX;
	IR_expected[2] = #98999000 1'b0;
end 
// expected IR[ 1 ]
initial
begin
	IR_expected[1] = 1'bX;
	IR_expected[1] = #98999000 1'b0;
end 
// expected IR[ 0 ]
initial
begin
	IR_expected[0] = 1'bX;
	IR_expected[0] = #98999000 1'b0;
end 
// expected ALU[ 7 ]
initial
begin
	ALU_expected[7] = 1'bX;
	ALU_expected[7] = #98999000 1'b0;
end 
// expected ALU[ 6 ]
initial
begin
	ALU_expected[6] = 1'bX;
	ALU_expected[6] = #98999000 1'b0;
end 
// expected ALU[ 5 ]
initial
begin
	ALU_expected[5] = 1'bX;
	ALU_expected[5] = #98999000 1'b0;
end 
// expected ALU[ 4 ]
initial
begin
	ALU_expected[4] = 1'bX;
	ALU_expected[4] = #98999000 1'b0;
end 
// expected ALU[ 3 ]
initial
begin
	ALU_expected[3] = 1'bX;
	ALU_expected[3] = #98999000 1'b0;
end 
// expected ALU[ 2 ]
initial
begin
	ALU_expected[2] = 1'bX;
	ALU_expected[2] = #98999000 1'b0;
end 
// expected ALU[ 1 ]
initial
begin
	ALU_expected[1] = 1'bX;
	ALU_expected[1] = #98999000 1'b0;
end 
// expected ALU[ 0 ]
initial
begin
	ALU_expected[0] = 1'bX;
	ALU_expected[0] = #98999000 1'b0;
end 

// expected FC
initial
begin
	FC_expected = 1'bX;
	FC_expected = #98999000 1'b0;
end 
// expected BUS[ 7 ]
initial
begin
	BUS_expected[7] = 1'bX;
	BUS_expected[7] = #98999000 1'b0;
end 
// expected BUS[ 6 ]
initial
begin
	BUS_expected[6] = 1'bX;
	BUS_expected[6] = #98999000 1'b0;
end 
// expected BUS[ 5 ]
initial
begin
	BUS_expected[5] = 1'bX;
	BUS_expected[5] = #98999000 1'b0;
end 
// expected BUS[ 4 ]
initial
begin
	BUS_expected[4] = 1'bX;
	BUS_expected[4] = #98999000 1'b0;
end 
// expected BUS[ 3 ]
initial
begin
	BUS_expected[3] = 1'bX;
	BUS_expected[3] = #98999000 1'b0;
end 
// expected BUS[ 2 ]
initial
begin
	BUS_expected[2] = 1'bX;
	BUS_expected[2] = #98999000 1'b0;
end 
// expected BUS[ 1 ]
initial
begin
	BUS_expected[1] = 1'bX;
	BUS_expected[1] = #98999000 1'b0;
end 
// expected BUS[ 0 ]
initial
begin
	BUS_expected[0] = 1'bX;
	BUS_expected[0] = #98999000 1'b0;
end 
// expected SFT[ 7 ]
initial
begin
	SFT_expected[7] = 1'bX;
	SFT_expected[7] = #98999000 1'b0;
end 
// expected SFT[ 6 ]
initial
begin
	SFT_expected[6] = 1'bX;
	SFT_expected[6] = #98999000 1'b0;
end 
// expected SFT[ 5 ]
initial
begin
	SFT_expected[5] = 1'bX;
	SFT_expected[5] = #98999000 1'b0;
end 
// expected SFT[ 4 ]
initial
begin
	SFT_expected[4] = 1'bX;
	SFT_expected[4] = #98999000 1'b0;
end 
// expected SFT[ 3 ]
initial
begin
	SFT_expected[3] = 1'bX;
	SFT_expected[3] = #98999000 1'b0;
end 
// expected SFT[ 2 ]
initial
begin
	SFT_expected[2] = 1'bX;
	SFT_expected[2] = #98999000 1'b0;
end 
// expected SFT[ 1 ]
initial
begin
	SFT_expected[1] = 1'bX;
	SFT_expected[1] = #98999000 1'b0;
end 
// expected SFT[ 0 ]
initial
begin
	SFT_expected[0] = 1'bX;
	SFT_expected[0] = #98999000 1'b0;
end 
// expected R0[ 7 ]
initial
begin
	R0_expected[7] = 1'bX;
	R0_expected[7] = #98999000 1'b0;
end 
// expected R0[ 6 ]
initial
begin
	R0_expected[6] = 1'bX;
	R0_expected[6] = #98999000 1'b0;
end 
// expected R0[ 5 ]
initial
begin
	R0_expected[5] = 1'bX;
	R0_expected[5] = #98999000 1'b0;
end 
// expected R0[ 4 ]
initial
begin
	R0_expected[4] = 1'bX;
	R0_expected[4] = #98999000 1'b0;
end 
// expected R0[ 3 ]
initial
begin
	R0_expected[3] = 1'bX;
	R0_expected[3] = #98999000 1'b0;
end 
// expected R0[ 2 ]
initial
begin
	R0_expected[2] = 1'bX;
	R0_expected[2] = #98999000 1'b0;
end 
// expected R0[ 1 ]
initial
begin
	R0_expected[1] = 1'bX;
	R0_expected[1] = #98999000 1'b0;
end 
// expected R0[ 0 ]
initial
begin
	R0_expected[0] = 1'bX;
	R0_expected[0] = #98999000 1'b0;
end 
// expected R1[ 7 ]
initial
begin
	R1_expected[7] = 1'bX;
	R1_expected[7] = #98999000 1'b0;
end 
// expected R1[ 6 ]
initial
begin
	R1_expected[6] = 1'bX;
	R1_expected[6] = #98999000 1'b0;
end 
// expected R1[ 5 ]
initial
begin
	R1_expected[5] = 1'bX;
	R1_expected[5] = #98999000 1'b0;
end 
// expected R1[ 4 ]
initial
begin
	R1_expected[4] = 1'bX;
	R1_expected[4] = #98999000 1'b0;
end 
// expected R1[ 3 ]
initial
begin
	R1_expected[3] = 1'bX;
	R1_expected[3] = #98999000 1'b0;
end 
// expected R1[ 2 ]
initial
begin
	R1_expected[2] = 1'bX;
	R1_expected[2] = #98999000 1'b0;
end 
// expected R1[ 1 ]
initial
begin
	R1_expected[1] = 1'bX;
	R1_expected[1] = #98999000 1'b0;
end 
// expected R1[ 0 ]
initial
begin
	R1_expected[0] = 1'bX;
	R1_expected[0] = #98999000 1'b0;
end 
// expected R2[ 7 ]
initial
begin
	R2_expected[7] = 1'bX;
	R2_expected[7] = #98999000 1'b0;
end 
// expected R2[ 6 ]
initial
begin
	R2_expected[6] = 1'bX;
	R2_expected[6] = #98999000 1'b0;
end 
// expected R2[ 5 ]
initial
begin
	R2_expected[5] = 1'bX;
	R2_expected[5] = #98999000 1'b0;
end 
// expected R2[ 4 ]
initial
begin
	R2_expected[4] = 1'bX;
	R2_expected[4] = #98999000 1'b0;
end 
// expected R2[ 3 ]
initial
begin
	R2_expected[3] = 1'bX;
	R2_expected[3] = #98999000 1'b0;
end 
// expected R2[ 2 ]
initial
begin
	R2_expected[2] = 1'bX;
	R2_expected[2] = #98999000 1'b0;
end 
// expected R2[ 1 ]
initial
begin
	R2_expected[1] = 1'bX;
	R2_expected[1] = #98999000 1'b0;
end 
// expected R2[ 0 ]
initial
begin
	R2_expected[0] = 1'bX;
	R2_expected[0] = #98999000 1'b0;
end 
// expected RAM[ 7 ]
initial
begin
	RAM_expected[7] = 1'bX;
	RAM_expected[7] = #98999000 1'b0;
end 
// expected RAM[ 6 ]
initial
begin
	RAM_expected[6] = 1'bX;
	RAM_expected[6] = #98999000 1'b0;
end 
// expected RAM[ 5 ]
initial
begin
	RAM_expected[5] = 1'bX;
	RAM_expected[5] = #98999000 1'b0;
end 
// expected RAM[ 4 ]
initial
begin
	RAM_expected[4] = 1'bX;
	RAM_expected[4] = #98999000 1'b0;
end 
// expected RAM[ 3 ]
initial
begin
	RAM_expected[3] = 1'bX;
	RAM_expected[3] = #98999000 1'b0;
end 
// expected RAM[ 2 ]
initial
begin
	RAM_expected[2] = 1'bX;
	RAM_expected[2] = #98999000 1'b0;
end 
// expected RAM[ 1 ]
initial
begin
	RAM_expected[1] = 1'bX;
	RAM_expected[1] = #98999000 1'b0;
end 
// expected RAM[ 0 ]
initial
begin
	RAM_expected[0] = 1'bX;
	RAM_expected[0] = #98999000 1'b0;
end 
// expected DOUT[ 7 ]
initial
begin
	DOUT_expected[7] = 1'bX;
	DOUT_expected[7] = #98999000 1'b0;
end 
// expected DOUT[ 6 ]
initial
begin
	DOUT_expected[6] = 1'bX;
	DOUT_expected[6] = #98999000 1'b0;
end 
// expected DOUT[ 5 ]
initial
begin
	DOUT_expected[5] = 1'bX;
	DOUT_expected[5] = #98999000 1'b0;
end 
// expected DOUT[ 4 ]
initial
begin
	DOUT_expected[4] = 1'bX;
	DOUT_expected[4] = #98999000 1'b0;
end 
// expected DOUT[ 3 ]
initial
begin
	DOUT_expected[3] = 1'bX;
	DOUT_expected[3] = #98999000 1'b0;
end 
// expected DOUT[ 2 ]
initial
begin
	DOUT_expected[2] = 1'bX;
	DOUT_expected[2] = #98999000 1'b0;
end 
// expected DOUT[ 1 ]
initial
begin
	DOUT_expected[1] = 1'bX;
	DOUT_expected[1] = #98999000 1'b0;
end 
// expected DOUT[ 0 ]
initial
begin
	DOUT_expected[0] = 1'bX;
	DOUT_expected[0] = #98999000 1'b0;
end 
// expected DR1[ 7 ]
initial
begin
	DR1_expected[7] = 1'bX;
	DR1_expected[7] = #98999000 1'b0;
end 
// expected DR1[ 6 ]
initial
begin
	DR1_expected[6] = 1'bX;
	DR1_expected[6] = #98999000 1'b0;
end 
// expected DR1[ 5 ]
initial
begin
	DR1_expected[5] = 1'bX;
	DR1_expected[5] = #98999000 1'b0;
end 
// expected DR1[ 4 ]
initial
begin
	DR1_expected[4] = 1'bX;
	DR1_expected[4] = #98999000 1'b0;
end 
// expected DR1[ 3 ]
initial
begin
	DR1_expected[3] = 1'bX;
	DR1_expected[3] = #98999000 1'b0;
end 
// expected DR1[ 2 ]
initial
begin
	DR1_expected[2] = 1'bX;
	DR1_expected[2] = #98999000 1'b0;
end 
// expected DR1[ 1 ]
initial
begin
	DR1_expected[1] = 1'bX;
	DR1_expected[1] = #98999000 1'b0;
end 
// expected DR1[ 0 ]
initial
begin
	DR1_expected[0] = 1'bX;
	DR1_expected[0] = #98999000 1'b0;
end 
// expected DR2[ 7 ]
initial
begin
	DR2_expected[7] = 1'bX;
	DR2_expected[7] = #98999000 1'b0;
end 
// expected DR2[ 6 ]
initial
begin
	DR2_expected[6] = 1'bX;
	DR2_expected[6] = #98999000 1'b0;
end 
// expected DR2[ 5 ]
initial
begin
	DR2_expected[5] = 1'bX;
	DR2_expected[5] = #98999000 1'b0;
end 
// expected DR2[ 4 ]
initial
begin
	DR2_expected[4] = 1'bX;
	DR2_expected[4] = #98999000 1'b0;
end 
// expected DR2[ 3 ]
initial
begin
	DR2_expected[3] = 1'bX;
	DR2_expected[3] = #98999000 1'b0;
end 
// expected DR2[ 2 ]
initial
begin
	DR2_expected[2] = 1'bX;
	DR2_expected[2] = #98999000 1'b0;
end 
// expected DR2[ 1 ]
initial
begin
	DR2_expected[1] = 1'bX;
	DR2_expected[1] = #98999000 1'b0;
end 
// expected DR2[ 0 ]
initial
begin
	DR2_expected[0] = 1'bX;
	DR2_expected[0] = #98999000 1'b0;
end 
// expected M[ 24 ]
initial
begin
	M_expected[24] = 1'bX;
	M_expected[24] = #98999000 1'b0;
end 
// expected M[ 23 ]
initial
begin
	M_expected[23] = 1'bX;
	M_expected[23] = #98999000 1'b0;
end 
// expected M[ 22 ]
initial
begin
	M_expected[22] = 1'bX;
	M_expected[22] = #98999000 1'b0;
end 
// expected M[ 21 ]
initial
begin
	M_expected[21] = 1'bX;
	M_expected[21] = #98999000 1'b0;
end 
// expected M[ 20 ]
initial
begin
	M_expected[20] = 1'bX;
	M_expected[20] = #98999000 1'b0;
end 
// expected M[ 19 ]
initial
begin
	M_expected[19] = 1'bX;
	M_expected[19] = #98999000 1'b0;
end 
// expected M[ 18 ]
initial
begin
	M_expected[18] = 1'bX;
	M_expected[18] = #98999000 1'b0;
end 
// expected M[ 17 ]
initial
begin
	M_expected[17] = 1'bX;
	M_expected[17] = #98999000 1'b0;
end 
// expected M[ 16 ]
initial
begin
	M_expected[16] = 1'bX;
	M_expected[16] = #98999000 1'b0;
end 
// expected M[ 15 ]
initial
begin
	M_expected[15] = 1'bX;
	M_expected[15] = #98999000 1'b0;
end 
// expected M[ 14 ]
initial
begin
	M_expected[14] = 1'bX;
	M_expected[14] = #98999000 1'b0;
end 
// expected M[ 13 ]
initial
begin
	M_expected[13] = 1'bX;
	M_expected[13] = #98999000 1'b0;
end 
// expected M[ 12 ]
initial
begin
	M_expected[12] = 1'bX;
	M_expected[12] = #98999000 1'b0;
end 
// expected M[ 11 ]
initial
begin
	M_expected[11] = 1'bX;
	M_expected[11] = #98999000 1'b0;
end 
// expected M[ 10 ]
initial
begin
	M_expected[10] = 1'bX;
	M_expected[10] = #98999000 1'b0;
end 
// expected M[ 9 ]
initial
begin
	M_expected[9] = 1'bX;
	M_expected[9] = #98999000 1'b0;
end 
// expected M[ 8 ]
initial
begin
	M_expected[8] = 1'bX;
	M_expected[8] = #98999000 1'b0;
end 
// expected M[ 7 ]
initial
begin
	M_expected[7] = 1'bX;
	M_expected[7] = #98999000 1'b0;
end 
// expected M[ 6 ]
initial
begin
	M_expected[6] = 1'bX;
	M_expected[6] = #98999000 1'b0;
end 
// expected M[ 5 ]
initial
begin
	M_expected[5] = 1'bX;
	M_expected[5] = #98999000 1'b0;
end 
// expected M[ 4 ]
initial
begin
	M_expected[4] = 1'bX;
	M_expected[4] = #98999000 1'b0;
end 
// expected M[ 3 ]
initial
begin
	M_expected[3] = 1'bX;
	M_expected[3] = #98999000 1'b0;
end 
// expected M[ 2 ]
initial
begin
	M_expected[2] = 1'bX;
	M_expected[2] = #98999000 1'b0;
end 
// expected M[ 1 ]
initial
begin
	M_expected[1] = 1'bX;
	M_expected[1] = #98999000 1'b0;
end 
// expected uA[ 5 ]
initial
begin
	uA_expected[5] = 1'bX;
	uA_expected[5] = #98999000 1'b0;
end 
// expected uA[ 4 ]
initial
begin
	uA_expected[4] = 1'bX;
	uA_expected[4] = #98999000 1'b0;
end 
// expected uA[ 3 ]
initial
begin
	uA_expected[3] = 1'bX;
	uA_expected[3] = #98999000 1'b0;
end 
// expected uA[ 2 ]
initial
begin
	uA_expected[2] = 1'bX;
	uA_expected[2] = #98999000 1'b0;
end 
// expected uA[ 1 ]
initial
begin
	uA_expected[1] = 1'bX;
	uA_expected[1] = #98999000 1'b0;
end 
// expected uA[ 0 ]
initial
begin
	uA_expected[0] = 1'bX;
	uA_expected[0] = #98999000 1'b0;
end 
// generate trigger
always @(ADDR_expected or ADDR or ALU_expected or ALU or BUS_expected or BUS or DOUT_expected or DOUT or DR1_expected or DR1 or DR2_expected or DR2 or FC_expected or FC or IR_expected or IR or LED_B_expected or LED_B or M_expected or M or PC_expected or PC or R0_expected or R0 or R1_expected or R1 or R2_expected or R2 or RAM_expected or RAM or RAM_B_expected or RAM_B or sE_expected or sE or SFT_expected or SFT or SW_B_expected or SW_B or uA_expected or uA)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ADDR = %b | expected ALU = %b | expected BUS = %b | expected DOUT = %b | expected DR1 = %b | expected DR2 = %b | expected FC = %b | expected IR = %b | expected LED_B = %b | expected M = %b | expected PC = %b | expected R0 = %b | expected R1 = %b | expected R2 = %b | expected RAM = %b | expected RAM_B = %b | expected sE = %b | expected SFT = %b | expected SW_B = %b | expected uA = %b | ",ADDR_expected_prev,ALU_expected_prev,BUS_expected_prev,DOUT_expected_prev,DR1_expected_prev,DR2_expected_prev,FC_expected_prev,IR_expected_prev,LED_B_expected_prev,M_expected_prev,PC_expected_prev,R0_expected_prev,R1_expected_prev,R2_expected_prev,RAM_expected_prev,RAM_B_expected_prev,sE_expected_prev,SFT_expected_prev,SW_B_expected_prev,uA_expected_prev);
	$display("| real ADDR = %b | real ALU = %b | real BUS = %b | real DOUT = %b | real DR1 = %b | real DR2 = %b | real FC = %b | real IR = %b | real LED_B = %b | real M = %b | real PC = %b | real R0 = %b | real R1 = %b | real R2 = %b | real RAM = %b | real RAM_B = %b | real sE = %b | real SFT = %b | real SW_B = %b | real uA = %b | ",ADDR_prev,ALU_prev,BUS_prev,DOUT_prev,DR1_prev,DR2_prev,FC_prev,IR_prev,LED_B_prev,M_prev,PC_prev,R0_prev,R1_prev,R2_prev,RAM_prev,RAM_B_prev,sE_prev,SFT_prev,SW_B_prev,uA_prev);
`endif
	if (
		( ADDR_expected_prev[0] !== 1'bx ) && ( ADDR_prev[0] !== ADDR_expected_prev[0] )
		&& ((ADDR_expected_prev[0] !== last_ADDR_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDR_exp[0] = ADDR_expected_prev[0];
	end
	if (
		( ADDR_expected_prev[1] !== 1'bx ) && ( ADDR_prev[1] !== ADDR_expected_prev[1] )
		&& ((ADDR_expected_prev[1] !== last_ADDR_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDR_exp[1] = ADDR_expected_prev[1];
	end
	if (
		( ADDR_expected_prev[2] !== 1'bx ) && ( ADDR_prev[2] !== ADDR_expected_prev[2] )
		&& ((ADDR_expected_prev[2] !== last_ADDR_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDR_exp[2] = ADDR_expected_prev[2];
	end
	if (
		( ADDR_expected_prev[3] !== 1'bx ) && ( ADDR_prev[3] !== ADDR_expected_prev[3] )
		&& ((ADDR_expected_prev[3] !== last_ADDR_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDR_exp[3] = ADDR_expected_prev[3];
	end
	if (
		( ADDR_expected_prev[4] !== 1'bx ) && ( ADDR_prev[4] !== ADDR_expected_prev[4] )
		&& ((ADDR_expected_prev[4] !== last_ADDR_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDR_exp[4] = ADDR_expected_prev[4];
	end
	if (
		( ADDR_expected_prev[5] !== 1'bx ) && ( ADDR_prev[5] !== ADDR_expected_prev[5] )
		&& ((ADDR_expected_prev[5] !== last_ADDR_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDR_exp[5] = ADDR_expected_prev[5];
	end
	if (
		( ADDR_expected_prev[6] !== 1'bx ) && ( ADDR_prev[6] !== ADDR_expected_prev[6] )
		&& ((ADDR_expected_prev[6] !== last_ADDR_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDR_exp[6] = ADDR_expected_prev[6];
	end
	if (
		( ADDR_expected_prev[7] !== 1'bx ) && ( ADDR_prev[7] !== ADDR_expected_prev[7] )
		&& ((ADDR_expected_prev[7] !== last_ADDR_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDR_expected_prev);
		$display ("     Real value = %b", ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDR_exp[7] = ADDR_expected_prev[7];
	end
	if (
		( ALU_expected_prev[0] !== 1'bx ) && ( ALU_prev[0] !== ALU_expected_prev[0] )
		&& ((ALU_expected_prev[0] !== last_ALU_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_exp[0] = ALU_expected_prev[0];
	end
	if (
		( ALU_expected_prev[1] !== 1'bx ) && ( ALU_prev[1] !== ALU_expected_prev[1] )
		&& ((ALU_expected_prev[1] !== last_ALU_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_exp[1] = ALU_expected_prev[1];
	end
	if (
		( ALU_expected_prev[2] !== 1'bx ) && ( ALU_prev[2] !== ALU_expected_prev[2] )
		&& ((ALU_expected_prev[2] !== last_ALU_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_exp[2] = ALU_expected_prev[2];
	end
	if (
		( ALU_expected_prev[3] !== 1'bx ) && ( ALU_prev[3] !== ALU_expected_prev[3] )
		&& ((ALU_expected_prev[3] !== last_ALU_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_exp[3] = ALU_expected_prev[3];
	end
	if (
		( ALU_expected_prev[4] !== 1'bx ) && ( ALU_prev[4] !== ALU_expected_prev[4] )
		&& ((ALU_expected_prev[4] !== last_ALU_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_exp[4] = ALU_expected_prev[4];
	end
	if (
		( ALU_expected_prev[5] !== 1'bx ) && ( ALU_prev[5] !== ALU_expected_prev[5] )
		&& ((ALU_expected_prev[5] !== last_ALU_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_exp[5] = ALU_expected_prev[5];
	end
	if (
		( ALU_expected_prev[6] !== 1'bx ) && ( ALU_prev[6] !== ALU_expected_prev[6] )
		&& ((ALU_expected_prev[6] !== last_ALU_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_exp[6] = ALU_expected_prev[6];
	end
	if (
		( ALU_expected_prev[7] !== 1'bx ) && ( ALU_prev[7] !== ALU_expected_prev[7] )
		&& ((ALU_expected_prev[7] !== last_ALU_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_exp[7] = ALU_expected_prev[7];
	end
	if (
		( BUS_expected_prev[0] !== 1'bx ) && ( BUS_prev[0] !== BUS_expected_prev[0] )
		&& ((BUS_expected_prev[0] !== last_BUS_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BUS_exp[0] = BUS_expected_prev[0];
	end
	if (
		( BUS_expected_prev[1] !== 1'bx ) && ( BUS_prev[1] !== BUS_expected_prev[1] )
		&& ((BUS_expected_prev[1] !== last_BUS_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BUS_exp[1] = BUS_expected_prev[1];
	end
	if (
		( BUS_expected_prev[2] !== 1'bx ) && ( BUS_prev[2] !== BUS_expected_prev[2] )
		&& ((BUS_expected_prev[2] !== last_BUS_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BUS_exp[2] = BUS_expected_prev[2];
	end
	if (
		( BUS_expected_prev[3] !== 1'bx ) && ( BUS_prev[3] !== BUS_expected_prev[3] )
		&& ((BUS_expected_prev[3] !== last_BUS_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BUS_exp[3] = BUS_expected_prev[3];
	end
	if (
		( BUS_expected_prev[4] !== 1'bx ) && ( BUS_prev[4] !== BUS_expected_prev[4] )
		&& ((BUS_expected_prev[4] !== last_BUS_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BUS_exp[4] = BUS_expected_prev[4];
	end
	if (
		( BUS_expected_prev[5] !== 1'bx ) && ( BUS_prev[5] !== BUS_expected_prev[5] )
		&& ((BUS_expected_prev[5] !== last_BUS_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BUS_exp[5] = BUS_expected_prev[5];
	end
	if (
		( BUS_expected_prev[6] !== 1'bx ) && ( BUS_prev[6] !== BUS_expected_prev[6] )
		&& ((BUS_expected_prev[6] !== last_BUS_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BUS_exp[6] = BUS_expected_prev[6];
	end
	if (
		( BUS_expected_prev[7] !== 1'bx ) && ( BUS_prev[7] !== BUS_expected_prev[7] )
		&& ((BUS_expected_prev[7] !== last_BUS_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BUS_exp[7] = BUS_expected_prev[7];
	end
	if (
		( DOUT_expected_prev[0] !== 1'bx ) && ( DOUT_prev[0] !== DOUT_expected_prev[0] )
		&& ((DOUT_expected_prev[0] !== last_DOUT_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT_expected_prev);
		$display ("     Real value = %b", DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DOUT_exp[0] = DOUT_expected_prev[0];
	end
	if (
		( DOUT_expected_prev[1] !== 1'bx ) && ( DOUT_prev[1] !== DOUT_expected_prev[1] )
		&& ((DOUT_expected_prev[1] !== last_DOUT_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT_expected_prev);
		$display ("     Real value = %b", DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DOUT_exp[1] = DOUT_expected_prev[1];
	end
	if (
		( DOUT_expected_prev[2] !== 1'bx ) && ( DOUT_prev[2] !== DOUT_expected_prev[2] )
		&& ((DOUT_expected_prev[2] !== last_DOUT_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT_expected_prev);
		$display ("     Real value = %b", DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DOUT_exp[2] = DOUT_expected_prev[2];
	end
	if (
		( DOUT_expected_prev[3] !== 1'bx ) && ( DOUT_prev[3] !== DOUT_expected_prev[3] )
		&& ((DOUT_expected_prev[3] !== last_DOUT_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT_expected_prev);
		$display ("     Real value = %b", DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DOUT_exp[3] = DOUT_expected_prev[3];
	end
	if (
		( DOUT_expected_prev[4] !== 1'bx ) && ( DOUT_prev[4] !== DOUT_expected_prev[4] )
		&& ((DOUT_expected_prev[4] !== last_DOUT_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT_expected_prev);
		$display ("     Real value = %b", DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DOUT_exp[4] = DOUT_expected_prev[4];
	end
	if (
		( DOUT_expected_prev[5] !== 1'bx ) && ( DOUT_prev[5] !== DOUT_expected_prev[5] )
		&& ((DOUT_expected_prev[5] !== last_DOUT_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT_expected_prev);
		$display ("     Real value = %b", DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DOUT_exp[5] = DOUT_expected_prev[5];
	end
	if (
		( DOUT_expected_prev[6] !== 1'bx ) && ( DOUT_prev[6] !== DOUT_expected_prev[6] )
		&& ((DOUT_expected_prev[6] !== last_DOUT_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT_expected_prev);
		$display ("     Real value = %b", DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DOUT_exp[6] = DOUT_expected_prev[6];
	end
	if (
		( DOUT_expected_prev[7] !== 1'bx ) && ( DOUT_prev[7] !== DOUT_expected_prev[7] )
		&& ((DOUT_expected_prev[7] !== last_DOUT_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DOUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DOUT_expected_prev);
		$display ("     Real value = %b", DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DOUT_exp[7] = DOUT_expected_prev[7];
	end
	if (
		( DR1_expected_prev[0] !== 1'bx ) && ( DR1_prev[0] !== DR1_expected_prev[0] )
		&& ((DR1_expected_prev[0] !== last_DR1_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DR1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DR1_expected_prev);
		$display ("     Real value = %b", DR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DR1_exp[0] = DR1_expected_prev[0];
	end
	if (
		( DR1_expected_prev[1] !== 1'bx ) && ( DR1_prev[1] !== DR1_expected_prev[1] )
		&& ((DR1_expected_prev[1] !== last_DR1_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DR1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DR1_expected_prev);
		$display ("     Real value = %b", DR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DR1_exp[1] = DR1_expected_prev[1];
	end
	if (
		( DR1_expected_prev[2] !== 1'bx ) && ( DR1_prev[2] !== DR1_expected_prev[2] )
		&& ((DR1_expected_prev[2] !== last_DR1_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DR1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DR1_expected_prev);
		$display ("     Real value = %b", DR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DR1_exp[2] = DR1_expected_prev[2];
	end
	if (
		( DR1_expected_prev[3] !== 1'bx ) && ( DR1_prev[3] !== DR1_expected_prev[3] )
		&& ((DR1_expected_prev[3] !== last_DR1_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DR1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DR1_expected_prev);
		$display ("     Real value = %b", DR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DR1_exp[3] = DR1_expected_prev[3];
	end
	if (
		( DR1_expected_prev[4] !== 1'bx ) && ( DR1_prev[4] !== DR1_expected_prev[4] )
		&& ((DR1_expected_prev[4] !== last_DR1_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DR1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DR1_expected_prev);
		$display ("     Real value = %b", DR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DR1_exp[4] = DR1_expected_prev[4];
	end
	if (
		( DR1_expected_prev[5] !== 1'bx ) && ( DR1_prev[5] !== DR1_expected_prev[5] )
		&& ((DR1_expected_prev[5] !== last_DR1_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DR1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DR1_expected_prev);
		$display ("     Real value = %b", DR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DR1_exp[5] = DR1_expected_prev[5];
	end
	if (
		( DR1_expected_prev[6] !== 1'bx ) && ( DR1_prev[6] !== DR1_expected_prev[6] )
		&& ((DR1_expected_prev[6] !== last_DR1_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DR1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DR1_expected_prev);
		$display ("     Real value = %b", DR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DR1_exp[6] = DR1_expected_prev[6];
	end
	if (
		( DR1_expected_prev[7] !== 1'bx ) && ( DR1_prev[7] !== DR1_expected_prev[7] )
		&& ((DR1_expected_prev[7] !== last_DR1_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DR1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DR1_expected_prev);
		$display ("     Real value = %b", DR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DR1_exp[7] = DR1_expected_prev[7];
	end
	if (
		( DR2_expected_prev[0] !== 1'bx ) && ( DR2_prev[0] !== DR2_expected_prev[0] )
		&& ((DR2_expected_prev[0] !== last_DR2_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DR2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DR2_expected_prev);
		$display ("     Real value = %b", DR2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DR2_exp[0] = DR2_expected_prev[0];
	end
	if (
		( DR2_expected_prev[1] !== 1'bx ) && ( DR2_prev[1] !== DR2_expected_prev[1] )
		&& ((DR2_expected_prev[1] !== last_DR2_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DR2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DR2_expected_prev);
		$display ("     Real value = %b", DR2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DR2_exp[1] = DR2_expected_prev[1];
	end
	if (
		( DR2_expected_prev[2] !== 1'bx ) && ( DR2_prev[2] !== DR2_expected_prev[2] )
		&& ((DR2_expected_prev[2] !== last_DR2_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DR2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DR2_expected_prev);
		$display ("     Real value = %b", DR2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DR2_exp[2] = DR2_expected_prev[2];
	end
	if (
		( DR2_expected_prev[3] !== 1'bx ) && ( DR2_prev[3] !== DR2_expected_prev[3] )
		&& ((DR2_expected_prev[3] !== last_DR2_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DR2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DR2_expected_prev);
		$display ("     Real value = %b", DR2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DR2_exp[3] = DR2_expected_prev[3];
	end
	if (
		( DR2_expected_prev[4] !== 1'bx ) && ( DR2_prev[4] !== DR2_expected_prev[4] )
		&& ((DR2_expected_prev[4] !== last_DR2_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DR2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DR2_expected_prev);
		$display ("     Real value = %b", DR2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DR2_exp[4] = DR2_expected_prev[4];
	end
	if (
		( DR2_expected_prev[5] !== 1'bx ) && ( DR2_prev[5] !== DR2_expected_prev[5] )
		&& ((DR2_expected_prev[5] !== last_DR2_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DR2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DR2_expected_prev);
		$display ("     Real value = %b", DR2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DR2_exp[5] = DR2_expected_prev[5];
	end
	if (
		( DR2_expected_prev[6] !== 1'bx ) && ( DR2_prev[6] !== DR2_expected_prev[6] )
		&& ((DR2_expected_prev[6] !== last_DR2_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DR2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DR2_expected_prev);
		$display ("     Real value = %b", DR2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DR2_exp[6] = DR2_expected_prev[6];
	end
	if (
		( DR2_expected_prev[7] !== 1'bx ) && ( DR2_prev[7] !== DR2_expected_prev[7] )
		&& ((DR2_expected_prev[7] !== last_DR2_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DR2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DR2_expected_prev);
		$display ("     Real value = %b", DR2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DR2_exp[7] = DR2_expected_prev[7];
	end
	if (
		( FC_expected_prev !== 1'bx ) && ( FC_prev !== FC_expected_prev )
		&& ((FC_expected_prev !== last_FC_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FC_expected_prev);
		$display ("     Real value = %b", FC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_FC_exp = FC_expected_prev;
	end
	if (
		( IR_expected_prev[0] !== 1'bx ) && ( IR_prev[0] !== IR_expected_prev[0] )
		&& ((IR_expected_prev[0] !== last_IR_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IR_exp[0] = IR_expected_prev[0];
	end
	if (
		( IR_expected_prev[1] !== 1'bx ) && ( IR_prev[1] !== IR_expected_prev[1] )
		&& ((IR_expected_prev[1] !== last_IR_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IR_exp[1] = IR_expected_prev[1];
	end
	if (
		( IR_expected_prev[2] !== 1'bx ) && ( IR_prev[2] !== IR_expected_prev[2] )
		&& ((IR_expected_prev[2] !== last_IR_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IR_exp[2] = IR_expected_prev[2];
	end
	if (
		( IR_expected_prev[3] !== 1'bx ) && ( IR_prev[3] !== IR_expected_prev[3] )
		&& ((IR_expected_prev[3] !== last_IR_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IR_exp[3] = IR_expected_prev[3];
	end
	if (
		( IR_expected_prev[4] !== 1'bx ) && ( IR_prev[4] !== IR_expected_prev[4] )
		&& ((IR_expected_prev[4] !== last_IR_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IR_exp[4] = IR_expected_prev[4];
	end
	if (
		( IR_expected_prev[5] !== 1'bx ) && ( IR_prev[5] !== IR_expected_prev[5] )
		&& ((IR_expected_prev[5] !== last_IR_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IR_exp[5] = IR_expected_prev[5];
	end
	if (
		( IR_expected_prev[6] !== 1'bx ) && ( IR_prev[6] !== IR_expected_prev[6] )
		&& ((IR_expected_prev[6] !== last_IR_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IR_exp[6] = IR_expected_prev[6];
	end
	if (
		( IR_expected_prev[7] !== 1'bx ) && ( IR_prev[7] !== IR_expected_prev[7] )
		&& ((IR_expected_prev[7] !== last_IR_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IR_exp[7] = IR_expected_prev[7];
	end
	if (
		( M_expected_prev[0] !== 1'bx ) && ( M_prev[0] !== M_expected_prev[0] )
		&& ((M_expected_prev[0] !== last_M_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[0] = M_expected_prev[0];
	end
	if (
		( M_expected_prev[1] !== 1'bx ) && ( M_prev[1] !== M_expected_prev[1] )
		&& ((M_expected_prev[1] !== last_M_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[1] = M_expected_prev[1];
	end
	if (
		( M_expected_prev[2] !== 1'bx ) && ( M_prev[2] !== M_expected_prev[2] )
		&& ((M_expected_prev[2] !== last_M_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[2] = M_expected_prev[2];
	end
	if (
		( M_expected_prev[3] !== 1'bx ) && ( M_prev[3] !== M_expected_prev[3] )
		&& ((M_expected_prev[3] !== last_M_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[3] = M_expected_prev[3];
	end
	if (
		( M_expected_prev[4] !== 1'bx ) && ( M_prev[4] !== M_expected_prev[4] )
		&& ((M_expected_prev[4] !== last_M_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[4] = M_expected_prev[4];
	end
	if (
		( M_expected_prev[5] !== 1'bx ) && ( M_prev[5] !== M_expected_prev[5] )
		&& ((M_expected_prev[5] !== last_M_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[5] = M_expected_prev[5];
	end
	if (
		( M_expected_prev[6] !== 1'bx ) && ( M_prev[6] !== M_expected_prev[6] )
		&& ((M_expected_prev[6] !== last_M_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[6] = M_expected_prev[6];
	end
	if (
		( M_expected_prev[7] !== 1'bx ) && ( M_prev[7] !== M_expected_prev[7] )
		&& ((M_expected_prev[7] !== last_M_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[7] = M_expected_prev[7];
	end
	if (
		( M_expected_prev[8] !== 1'bx ) && ( M_prev[8] !== M_expected_prev[8] )
		&& ((M_expected_prev[8] !== last_M_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[8] = M_expected_prev[8];
	end
	if (
		( M_expected_prev[9] !== 1'bx ) && ( M_prev[9] !== M_expected_prev[9] )
		&& ((M_expected_prev[9] !== last_M_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[9] = M_expected_prev[9];
	end
	if (
		( M_expected_prev[10] !== 1'bx ) && ( M_prev[10] !== M_expected_prev[10] )
		&& ((M_expected_prev[10] !== last_M_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[10] = M_expected_prev[10];
	end
	if (
		( M_expected_prev[11] !== 1'bx ) && ( M_prev[11] !== M_expected_prev[11] )
		&& ((M_expected_prev[11] !== last_M_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[11] = M_expected_prev[11];
	end
	if (
		( M_expected_prev[12] !== 1'bx ) && ( M_prev[12] !== M_expected_prev[12] )
		&& ((M_expected_prev[12] !== last_M_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[12] = M_expected_prev[12];
	end
	if (
		( M_expected_prev[13] !== 1'bx ) && ( M_prev[13] !== M_expected_prev[13] )
		&& ((M_expected_prev[13] !== last_M_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[13] = M_expected_prev[13];
	end
	if (
		( M_expected_prev[14] !== 1'bx ) && ( M_prev[14] !== M_expected_prev[14] )
		&& ((M_expected_prev[14] !== last_M_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[14] = M_expected_prev[14];
	end
	if (
		( M_expected_prev[15] !== 1'bx ) && ( M_prev[15] !== M_expected_prev[15] )
		&& ((M_expected_prev[15] !== last_M_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[15] = M_expected_prev[15];
	end
	if (
		( M_expected_prev[16] !== 1'bx ) && ( M_prev[16] !== M_expected_prev[16] )
		&& ((M_expected_prev[16] !== last_M_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[16] = M_expected_prev[16];
	end
	if (
		( M_expected_prev[17] !== 1'bx ) && ( M_prev[17] !== M_expected_prev[17] )
		&& ((M_expected_prev[17] !== last_M_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[17] = M_expected_prev[17];
	end
	if (
		( M_expected_prev[18] !== 1'bx ) && ( M_prev[18] !== M_expected_prev[18] )
		&& ((M_expected_prev[18] !== last_M_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[18] = M_expected_prev[18];
	end
	if (
		( M_expected_prev[19] !== 1'bx ) && ( M_prev[19] !== M_expected_prev[19] )
		&& ((M_expected_prev[19] !== last_M_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[19] = M_expected_prev[19];
	end
	if (
		( M_expected_prev[20] !== 1'bx ) && ( M_prev[20] !== M_expected_prev[20] )
		&& ((M_expected_prev[20] !== last_M_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[20] = M_expected_prev[20];
	end
	if (
		( M_expected_prev[21] !== 1'bx ) && ( M_prev[21] !== M_expected_prev[21] )
		&& ((M_expected_prev[21] !== last_M_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[21] = M_expected_prev[21];
	end
	if (
		( M_expected_prev[22] !== 1'bx ) && ( M_prev[22] !== M_expected_prev[22] )
		&& ((M_expected_prev[22] !== last_M_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[22] = M_expected_prev[22];
	end
	if (
		( M_expected_prev[23] !== 1'bx ) && ( M_prev[23] !== M_expected_prev[23] )
		&& ((M_expected_prev[23] !== last_M_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_exp[23] = M_expected_prev[23];
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( R0_expected_prev[0] !== 1'bx ) && ( R0_prev[0] !== R0_expected_prev[0] )
		&& ((R0_expected_prev[0] !== last_R0_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R0_exp[0] = R0_expected_prev[0];
	end
	if (
		( R0_expected_prev[1] !== 1'bx ) && ( R0_prev[1] !== R0_expected_prev[1] )
		&& ((R0_expected_prev[1] !== last_R0_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R0_exp[1] = R0_expected_prev[1];
	end
	if (
		( R0_expected_prev[2] !== 1'bx ) && ( R0_prev[2] !== R0_expected_prev[2] )
		&& ((R0_expected_prev[2] !== last_R0_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R0_exp[2] = R0_expected_prev[2];
	end
	if (
		( R0_expected_prev[3] !== 1'bx ) && ( R0_prev[3] !== R0_expected_prev[3] )
		&& ((R0_expected_prev[3] !== last_R0_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R0_exp[3] = R0_expected_prev[3];
	end
	if (
		( R0_expected_prev[4] !== 1'bx ) && ( R0_prev[4] !== R0_expected_prev[4] )
		&& ((R0_expected_prev[4] !== last_R0_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R0_exp[4] = R0_expected_prev[4];
	end
	if (
		( R0_expected_prev[5] !== 1'bx ) && ( R0_prev[5] !== R0_expected_prev[5] )
		&& ((R0_expected_prev[5] !== last_R0_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R0_exp[5] = R0_expected_prev[5];
	end
	if (
		( R0_expected_prev[6] !== 1'bx ) && ( R0_prev[6] !== R0_expected_prev[6] )
		&& ((R0_expected_prev[6] !== last_R0_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R0_exp[6] = R0_expected_prev[6];
	end
	if (
		( R0_expected_prev[7] !== 1'bx ) && ( R0_prev[7] !== R0_expected_prev[7] )
		&& ((R0_expected_prev[7] !== last_R0_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R0_exp[7] = R0_expected_prev[7];
	end
	if (
		( R1_expected_prev[0] !== 1'bx ) && ( R1_prev[0] !== R1_expected_prev[0] )
		&& ((R1_expected_prev[0] !== last_R1_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R1_exp[0] = R1_expected_prev[0];
	end
	if (
		( R1_expected_prev[1] !== 1'bx ) && ( R1_prev[1] !== R1_expected_prev[1] )
		&& ((R1_expected_prev[1] !== last_R1_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R1_exp[1] = R1_expected_prev[1];
	end
	if (
		( R1_expected_prev[2] !== 1'bx ) && ( R1_prev[2] !== R1_expected_prev[2] )
		&& ((R1_expected_prev[2] !== last_R1_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R1_exp[2] = R1_expected_prev[2];
	end
	if (
		( R1_expected_prev[3] !== 1'bx ) && ( R1_prev[3] !== R1_expected_prev[3] )
		&& ((R1_expected_prev[3] !== last_R1_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R1_exp[3] = R1_expected_prev[3];
	end
	if (
		( R1_expected_prev[4] !== 1'bx ) && ( R1_prev[4] !== R1_expected_prev[4] )
		&& ((R1_expected_prev[4] !== last_R1_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R1_exp[4] = R1_expected_prev[4];
	end
	if (
		( R1_expected_prev[5] !== 1'bx ) && ( R1_prev[5] !== R1_expected_prev[5] )
		&& ((R1_expected_prev[5] !== last_R1_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R1_exp[5] = R1_expected_prev[5];
	end
	if (
		( R1_expected_prev[6] !== 1'bx ) && ( R1_prev[6] !== R1_expected_prev[6] )
		&& ((R1_expected_prev[6] !== last_R1_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R1_exp[6] = R1_expected_prev[6];
	end
	if (
		( R1_expected_prev[7] !== 1'bx ) && ( R1_prev[7] !== R1_expected_prev[7] )
		&& ((R1_expected_prev[7] !== last_R1_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R1_exp[7] = R1_expected_prev[7];
	end
	if (
		( R2_expected_prev[0] !== 1'bx ) && ( R2_prev[0] !== R2_expected_prev[0] )
		&& ((R2_expected_prev[0] !== last_R2_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R2_exp[0] = R2_expected_prev[0];
	end
	if (
		( R2_expected_prev[1] !== 1'bx ) && ( R2_prev[1] !== R2_expected_prev[1] )
		&& ((R2_expected_prev[1] !== last_R2_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R2_exp[1] = R2_expected_prev[1];
	end
	if (
		( R2_expected_prev[2] !== 1'bx ) && ( R2_prev[2] !== R2_expected_prev[2] )
		&& ((R2_expected_prev[2] !== last_R2_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R2_exp[2] = R2_expected_prev[2];
	end
	if (
		( R2_expected_prev[3] !== 1'bx ) && ( R2_prev[3] !== R2_expected_prev[3] )
		&& ((R2_expected_prev[3] !== last_R2_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R2_exp[3] = R2_expected_prev[3];
	end
	if (
		( R2_expected_prev[4] !== 1'bx ) && ( R2_prev[4] !== R2_expected_prev[4] )
		&& ((R2_expected_prev[4] !== last_R2_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R2_exp[4] = R2_expected_prev[4];
	end
	if (
		( R2_expected_prev[5] !== 1'bx ) && ( R2_prev[5] !== R2_expected_prev[5] )
		&& ((R2_expected_prev[5] !== last_R2_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R2_exp[5] = R2_expected_prev[5];
	end
	if (
		( R2_expected_prev[6] !== 1'bx ) && ( R2_prev[6] !== R2_expected_prev[6] )
		&& ((R2_expected_prev[6] !== last_R2_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R2_exp[6] = R2_expected_prev[6];
	end
	if (
		( R2_expected_prev[7] !== 1'bx ) && ( R2_prev[7] !== R2_expected_prev[7] )
		&& ((R2_expected_prev[7] !== last_R2_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R2_exp[7] = R2_expected_prev[7];
	end
	if (
		( RAM_expected_prev[0] !== 1'bx ) && ( RAM_prev[0] !== RAM_expected_prev[0] )
		&& ((RAM_expected_prev[0] !== last_RAM_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_expected_prev);
		$display ("     Real value = %b", RAM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RAM_exp[0] = RAM_expected_prev[0];
	end
	if (
		( RAM_expected_prev[1] !== 1'bx ) && ( RAM_prev[1] !== RAM_expected_prev[1] )
		&& ((RAM_expected_prev[1] !== last_RAM_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_expected_prev);
		$display ("     Real value = %b", RAM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RAM_exp[1] = RAM_expected_prev[1];
	end
	if (
		( RAM_expected_prev[2] !== 1'bx ) && ( RAM_prev[2] !== RAM_expected_prev[2] )
		&& ((RAM_expected_prev[2] !== last_RAM_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_expected_prev);
		$display ("     Real value = %b", RAM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RAM_exp[2] = RAM_expected_prev[2];
	end
	if (
		( RAM_expected_prev[3] !== 1'bx ) && ( RAM_prev[3] !== RAM_expected_prev[3] )
		&& ((RAM_expected_prev[3] !== last_RAM_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_expected_prev);
		$display ("     Real value = %b", RAM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RAM_exp[3] = RAM_expected_prev[3];
	end
	if (
		( RAM_expected_prev[4] !== 1'bx ) && ( RAM_prev[4] !== RAM_expected_prev[4] )
		&& ((RAM_expected_prev[4] !== last_RAM_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_expected_prev);
		$display ("     Real value = %b", RAM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RAM_exp[4] = RAM_expected_prev[4];
	end
	if (
		( RAM_expected_prev[5] !== 1'bx ) && ( RAM_prev[5] !== RAM_expected_prev[5] )
		&& ((RAM_expected_prev[5] !== last_RAM_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_expected_prev);
		$display ("     Real value = %b", RAM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RAM_exp[5] = RAM_expected_prev[5];
	end
	if (
		( RAM_expected_prev[6] !== 1'bx ) && ( RAM_prev[6] !== RAM_expected_prev[6] )
		&& ((RAM_expected_prev[6] !== last_RAM_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_expected_prev);
		$display ("     Real value = %b", RAM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RAM_exp[6] = RAM_expected_prev[6];
	end
	if (
		( RAM_expected_prev[7] !== 1'bx ) && ( RAM_prev[7] !== RAM_expected_prev[7] )
		&& ((RAM_expected_prev[7] !== last_RAM_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_expected_prev);
		$display ("     Real value = %b", RAM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RAM_exp[7] = RAM_expected_prev[7];
	end
	if (
		( SFT_expected_prev[0] !== 1'bx ) && ( SFT_prev[0] !== SFT_expected_prev[0] )
		&& ((SFT_expected_prev[0] !== last_SFT_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SFT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SFT_expected_prev);
		$display ("     Real value = %b", SFT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SFT_exp[0] = SFT_expected_prev[0];
	end
	if (
		( SFT_expected_prev[1] !== 1'bx ) && ( SFT_prev[1] !== SFT_expected_prev[1] )
		&& ((SFT_expected_prev[1] !== last_SFT_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SFT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SFT_expected_prev);
		$display ("     Real value = %b", SFT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SFT_exp[1] = SFT_expected_prev[1];
	end
	if (
		( SFT_expected_prev[2] !== 1'bx ) && ( SFT_prev[2] !== SFT_expected_prev[2] )
		&& ((SFT_expected_prev[2] !== last_SFT_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SFT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SFT_expected_prev);
		$display ("     Real value = %b", SFT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SFT_exp[2] = SFT_expected_prev[2];
	end
	if (
		( SFT_expected_prev[3] !== 1'bx ) && ( SFT_prev[3] !== SFT_expected_prev[3] )
		&& ((SFT_expected_prev[3] !== last_SFT_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SFT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SFT_expected_prev);
		$display ("     Real value = %b", SFT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SFT_exp[3] = SFT_expected_prev[3];
	end
	if (
		( SFT_expected_prev[4] !== 1'bx ) && ( SFT_prev[4] !== SFT_expected_prev[4] )
		&& ((SFT_expected_prev[4] !== last_SFT_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SFT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SFT_expected_prev);
		$display ("     Real value = %b", SFT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SFT_exp[4] = SFT_expected_prev[4];
	end
	if (
		( SFT_expected_prev[5] !== 1'bx ) && ( SFT_prev[5] !== SFT_expected_prev[5] )
		&& ((SFT_expected_prev[5] !== last_SFT_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SFT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SFT_expected_prev);
		$display ("     Real value = %b", SFT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SFT_exp[5] = SFT_expected_prev[5];
	end
	if (
		( SFT_expected_prev[6] !== 1'bx ) && ( SFT_prev[6] !== SFT_expected_prev[6] )
		&& ((SFT_expected_prev[6] !== last_SFT_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SFT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SFT_expected_prev);
		$display ("     Real value = %b", SFT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SFT_exp[6] = SFT_expected_prev[6];
	end
	if (
		( SFT_expected_prev[7] !== 1'bx ) && ( SFT_prev[7] !== SFT_expected_prev[7] )
		&& ((SFT_expected_prev[7] !== last_SFT_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SFT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SFT_expected_prev);
		$display ("     Real value = %b", SFT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SFT_exp[7] = SFT_expected_prev[7];
	end
	if (
		( uA_expected_prev[0] !== 1'bx ) && ( uA_prev[0] !== uA_expected_prev[0] )
		&& ((uA_expected_prev[0] !== last_uA_exp[0]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uA_expected_prev);
		$display ("     Real value = %b", uA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_uA_exp[0] = uA_expected_prev[0];
	end
	if (
		( uA_expected_prev[1] !== 1'bx ) && ( uA_prev[1] !== uA_expected_prev[1] )
		&& ((uA_expected_prev[1] !== last_uA_exp[1]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uA_expected_prev);
		$display ("     Real value = %b", uA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_uA_exp[1] = uA_expected_prev[1];
	end
	if (
		( uA_expected_prev[2] !== 1'bx ) && ( uA_prev[2] !== uA_expected_prev[2] )
		&& ((uA_expected_prev[2] !== last_uA_exp[2]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uA_expected_prev);
		$display ("     Real value = %b", uA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_uA_exp[2] = uA_expected_prev[2];
	end
	if (
		( uA_expected_prev[3] !== 1'bx ) && ( uA_prev[3] !== uA_expected_prev[3] )
		&& ((uA_expected_prev[3] !== last_uA_exp[3]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uA_expected_prev);
		$display ("     Real value = %b", uA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_uA_exp[3] = uA_expected_prev[3];
	end
	if (
		( uA_expected_prev[4] !== 1'bx ) && ( uA_prev[4] !== uA_expected_prev[4] )
		&& ((uA_expected_prev[4] !== last_uA_exp[4]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uA_expected_prev);
		$display ("     Real value = %b", uA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_uA_exp[4] = uA_expected_prev[4];
	end
	if (
		( uA_expected_prev[5] !== 1'bx ) && ( uA_prev[5] !== uA_expected_prev[5] )
		&& ((uA_expected_prev[5] !== last_uA_exp[5]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uA_expected_prev);
		$display ("     Real value = %b", uA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_uA_exp[5] = uA_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CPU8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [7:0] IN;
reg RST;
reg STEP;
// wires                                               
wire [7:0] ADDR;
wire [7:0] ALU;
wire [7:0] BUS;
wire [7:0] DOUT;
wire [7:0] DR1;
wire [7:0] DR2;
wire FC;
wire [7:0] IR;
wire LED_B;
wire [24:1] M;
wire [7:0] PC;
wire [7:0] R0;
wire [7:0] R1;
wire [7:0] R2;
wire [7:0] RAM;
wire RAM_B;
wire [6:1] sE;
wire [7:0] SFT;
wire SW_B;
wire [5:0] uA;

wire sampler;                             

// assign statements (if any)                          
CPU8 i1 (
// port map - connection between master ports and signals/registers   
	.ADDR(ADDR),
	.ALU(ALU),
	.BUS(BUS),
	.CLK(CLK),
	.DOUT(DOUT),
	.DR1(DR1),
	.DR2(DR2),
	.FC(FC),
	.IN(IN),
	.IR(IR),
	.LED_B(LED_B),
	.M(M),
	.PC(PC),
	.R0(R0),
	.R1(R1),
	.R2(R2),
	.RAM(RAM),
	.RAM_B(RAM_B),
	.RST(RST),
	.sE(sE),
	.SFT(SFT),
	.STEP(STEP),
	.SW_B(SW_B),
	.uA(uA)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #25000 1'b1;
	#25000;
end 

// RST
initial
begin
	RST = 1'b0;
	RST = #717871 1'b1;
	RST = #386546 1'b0;
end 

// STEP
initial
begin
	repeat(153)
	begin
		STEP = 1'b0;
		STEP = #325000 1'b1;
		# 325000;
	end
	STEP = 1'b0;
	STEP = #325000 1'b1;
end 
// IN[ 7 ]
initial
begin
	IN[7] = 1'b0;
end 
// IN[ 6 ]
initial
begin
	IN[6] = 1'b0;
end 
// IN[ 5 ]
initial
begin
	IN[5] = 1'b0;
end 
// IN[ 4 ]
initial
begin
	IN[4] = 1'b0;
end 
// IN[ 3 ]
initial
begin
	IN[3] = 1'b0;
end 
// IN[ 2 ]
initial
begin
	IN[2] = 1'b1;
	IN[2] = #15442054 1'b0;
	IN[2] = #39623656 1'b1;
	IN[2] = #15376344 1'b0;
end 
// IN[ 1 ]
initial
begin
	IN[1] = 1'b1;
	IN[1] = #15442054 1'b0;
	IN[1] = #39623656 1'b1;
	IN[1] = #15376344 1'b0;
end 
// IN[ 0 ]
initial
begin
	IN[0] = 1'b1;
	IN[0] = #15442054 1'b0;
	IN[0] = #39623656 1'b1;
	IN[0] = #15376344 1'b0;
end 

CPU8_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.IN(IN),
	.RST(RST),
	.STEP(STEP),
	.sampler_tx(sampler)
);

CPU8_vlg_check_tst tb_out(
	.ADDR(ADDR),
	.ALU(ALU),
	.BUS(BUS),
	.DOUT(DOUT),
	.DR1(DR1),
	.DR2(DR2),
	.FC(FC),
	.IR(IR),
	.LED_B(LED_B),
	.M(M),
	.PC(PC),
	.R0(R0),
	.R1(R1),
	.R2(R2),
	.RAM(RAM),
	.RAM_B(RAM_B),
	.sE(sE),
	.SFT(SFT),
	.SW_B(SW_B),
	.uA(uA),
	.sampler_rx(sampler)
);
endmodule

